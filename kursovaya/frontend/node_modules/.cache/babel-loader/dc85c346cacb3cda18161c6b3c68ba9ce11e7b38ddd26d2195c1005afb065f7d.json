{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport apiClient from '../utils/apiClient';\nconst initialState = {\n  employeeServices: [],\n  loading: false,\n  error: null\n};\nexport const fetchEmployeeServices = createAsyncThunk('employeeServices/fetchEmployeeServices', async () => {\n  const response = await apiClient.get('/employeeservices');\n  return response.data;\n});\nexport const addEmployeeServiceAsync = createAsyncThunk('employeeServices/addEmployeeService', async employeeService => {\n  const response = await apiClient.post('/employeeservices', employeeService);\n  return response.data;\n});\nexport const updateEmployeeServiceAsync = createAsyncThunk('employeeServices/updateEmployeeService', async employeeService => {\n  const response = await apiClient.put(`/employeeservices/${employeeService.employeeId}/${employeeService.serviceId}`, employeeService);\n  return response.data;\n});\nexport const deleteEmployeeServiceAsync = createAsyncThunk('employeeServices/deleteEmployeeService', async employeeService => {\n  await apiClient.delete(`/employeeservices/${employeeService.employeeId}/${employeeService.serviceId}`);\n  return employeeService;\n});\nexport const fetchEmployees = createAsyncThunk('employeeServices/fetchEmployees', async () => {\n  const response = await apiClient.get('/employees');\n  return response.data;\n});\nexport const fetchServices = createAsyncThunk('employeeServices/fetchServices', async () => {\n  const response = await apiClient.get('/services');\n  return response.data;\n});\nconst employeeServiceSlice = createSlice({\n  name: 'employeeServices',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchEmployeeServices.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchEmployeeServices.fulfilled, (state, action) => {\n      state.loading = false;\n      state.employeeServices = action.payload;\n    }).addCase(fetchEmployeeServices.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Failed to fetch employee services';\n    }).addCase(addEmployeeServiceAsync.fulfilled, (state, action) => {\n      state.employeeServices.push(action.payload);\n    }).addCase(updateEmployeeServiceAsync.fulfilled, (state, action) => {\n      const updatedService = action.payload;\n      state.employeeServices = state.employeeServices.map(service => service.employeeServiceId === updatedService.employeeServiceId ? updatedService : service);\n    }).addCase(deleteEmployeeServiceAsync.fulfilled, (state, action) => {\n      state.employeeServices = state.employeeServices.filter(employeeService => !(employeeService.employeeId === action.payload.employeeId && employeeService.serviceId === action.payload.serviceId));\n    });\n  }\n});\nexport default employeeServiceSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","apiClient","initialState","employeeServices","loading","error","fetchEmployeeServices","response","get","data","addEmployeeServiceAsync","employeeService","post","updateEmployeeServiceAsync","put","employeeId","serviceId","deleteEmployeeServiceAsync","delete","fetchEmployees","fetchServices","employeeServiceSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","push","updatedService","map","service","employeeServiceId","filter","reducer"],"sources":["C:/Users/Super/kursovaya/frontend/src/redux/employeeServiceSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport apiClient from '../utils/apiClient';\n\nexport interface EmployeeService {\n  employeeServiceId: number;\n  employeeName: string;\n  serviceName: string;\n  employeeId: number;\n  serviceId: number;\n}\n\ninterface EmployeeServiceState {\n  employeeServices: EmployeeService[];\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: EmployeeServiceState = {\n  employeeServices: [],\n  loading: false,\n  error: null\n};\n\nexport const fetchEmployeeServices = createAsyncThunk('employeeServices/fetchEmployeeServices', async () => {\n  const response = await apiClient.get('/employeeservices');\n  return response.data;\n});\n\nexport const addEmployeeServiceAsync = createAsyncThunk('employeeServices/addEmployeeService', async (employeeService: { employeeId: number; serviceId: number }) => {\n  const response = await apiClient.post('/employeeservices', employeeService);\n  return response.data;\n});\n\nexport const updateEmployeeServiceAsync = createAsyncThunk('employeeServices/updateEmployeeService', async (employeeService: EmployeeService) => {\n  const response = await apiClient.put(`/employeeservices/${employeeService.employeeId}/${employeeService.serviceId}`, employeeService);\n  return response.data;\n});\n\nexport const deleteEmployeeServiceAsync = createAsyncThunk('employeeServices/deleteEmployeeService', async (employeeService: { employeeId: number; serviceId: number }) => {\n  await apiClient.delete(`/employeeservices/${employeeService.employeeId}/${employeeService.serviceId}`);\n  return employeeService;\n});\n\nexport const fetchEmployees = createAsyncThunk('employeeServices/fetchEmployees', async () => {\n  const response = await apiClient.get('/employees');\n  return response.data;\n});\n\nexport const fetchServices = createAsyncThunk('employeeServices/fetchServices', async () => {\n  const response = await apiClient.get('/services');\n  return response.data;\n});\n\nconst employeeServiceSlice = createSlice({\n  name: 'employeeServices',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchEmployeeServices.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchEmployeeServices.fulfilled, (state, action) => {\n        state.loading = false;\n        state.employeeServices = action.payload;\n      })\n      .addCase(fetchEmployeeServices.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || 'Failed to fetch employee services';\n      })\n      .addCase(addEmployeeServiceAsync.fulfilled, (state, action) => {\n        state.employeeServices.push(action.payload);\n      })\n      .addCase(updateEmployeeServiceAsync.fulfilled, (state, action) => {\n        const updatedService = action.payload;\n        state.employeeServices = state.employeeServices.map((service) =>\n          service.employeeServiceId === updatedService.employeeServiceId ? updatedService : service\n        );\n      })\n      .addCase(deleteEmployeeServiceAsync.fulfilled, (state, action) => {\n        state.employeeServices = state.employeeServices.filter(\n          (employeeService) =>\n            !(\n              employeeService.employeeId === action.payload.employeeId &&\n              employeeService.serviceId === action.payload.serviceId\n            )\n        );\n      });\n  }\n});\n\nexport default employeeServiceSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}