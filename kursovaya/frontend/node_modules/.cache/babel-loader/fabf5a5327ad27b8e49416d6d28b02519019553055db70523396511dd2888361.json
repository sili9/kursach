{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport apiClient from '../utils/apiClient';\nconst initialState = {\n  employees: [],\n  loading: false,\n  error: null\n};\nexport const fetchEmployees = createAsyncThunk('employees/fetchEmployees', async () => {\n  const response = await apiClient.get('/employees');\n  return response.data;\n});\nexport const deleteEmployee = createAsyncThunk('employees/deleteEmployee', async id => {\n  await apiClient.delete(`/employees/${id}`);\n  return id;\n});\nexport const updateEmployee = createAsyncThunk('employees/updateEmployee', async employee => {\n  const response = await apiClient.put(`/employees/${employee.employeeId}`, employee);\n  return response.data;\n});\nconst employeeSlice = createSlice({\n  name: 'employees',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchEmployees.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchEmployees.fulfilled, (state, action) => {\n      state.loading = false;\n      state.employees = action.payload;\n    }).addCase(fetchEmployees.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message || 'Failed to fetch employees';\n    }).addCase(deleteEmployee.fulfilled, (state, action) => {\n      state.employees = state.employees.filter(employee => employee.employeeId !== action.payload);\n    }).addCase(updateEmployee.fulfilled, (state, action) => {\n      const updatedEmployee = action.payload;\n      state.employees = state.employees.map(employee => employee.employeeId === updatedEmployee.employeeId ? updatedEmployee : employee);\n    });\n  }\n});\nexport default employeeSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","apiClient","initialState","employees","loading","error","fetchEmployees","response","get","data","deleteEmployee","id","delete","updateEmployee","employee","put","employeeId","employeeSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","filter","updatedEmployee","map","reducer"],"sources":["C:/Users/Super/kursovaya/frontend/src/redux/employeeSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport apiClient from '../utils/apiClient';\n\ninterface Employee {\n  employeeId: number;\n  name: string;\n  address: string;\n  phone: string;\n  speciality: string;\n  imageData: string;\n}\n\ninterface EmployeeState {\n  employees: Employee[];\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: EmployeeState = {\n  employees: [],\n  loading: false,\n  error: null,\n};\n\nexport const fetchEmployees = createAsyncThunk('employees/fetchEmployees', async () => {\n  const response = await apiClient.get('/employees');\n  return response.data;\n});\n\nexport const deleteEmployee = createAsyncThunk('employees/deleteEmployee', async (id: number) => {\n  await apiClient.delete(`/employees/${id}`);\n  return id;\n});\n\nexport const updateEmployee = createAsyncThunk('employees/updateEmployee', async (employee: Employee) => {\n  const response = await apiClient.put(`/employees/${employee.employeeId}`, employee);\n  return response.data;\n});\n\nconst employeeSlice = createSlice({\n  name: 'employees',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchEmployees.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchEmployees.fulfilled, (state, action) => {\n        state.loading = false;\n        state.employees = action.payload;\n      })\n      .addCase(fetchEmployees.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || 'Failed to fetch employees';\n      })\n      .addCase(deleteEmployee.fulfilled, (state, action) => {\n        state.employees = state.employees.filter((employee) => employee.employeeId !== action.payload);\n      })\n      .addCase(updateEmployee.fulfilled, (state, action) => {\n        const updatedEmployee = action.payload;\n        state.employees = state.employees.map((employee) =>\n          employee.employeeId === updatedEmployee.employeeId ? updatedEmployee : employee\n        );\n      });\n  },\n});\n\nexport default employeeSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,SAAS,MAAM,oBAAoB;AAiB1C,MAAMC,YAA2B,GAAG;EAClCC,SAAS,EAAE,EAAE;EACbC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAAC,0BAA0B,EAAE,YAAY;EACrF,MAAMO,QAAQ,GAAG,MAAMN,SAAS,CAACO,GAAG,CAAC,YAAY,CAAC;EAClD,OAAOD,QAAQ,CAACE,IAAI;AACtB,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAGV,gBAAgB,CAAC,0BAA0B,EAAE,MAAOW,EAAU,IAAK;EAC/F,MAAMV,SAAS,CAACW,MAAM,CAAE,cAAaD,EAAG,EAAC,CAAC;EAC1C,OAAOA,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAME,cAAc,GAAGb,gBAAgB,CAAC,0BAA0B,EAAE,MAAOc,QAAkB,IAAK;EACvG,MAAMP,QAAQ,GAAG,MAAMN,SAAS,CAACc,GAAG,CAAE,cAAaD,QAAQ,CAACE,UAAW,EAAC,EAAEF,QAAQ,CAAC;EACnF,OAAOP,QAAQ,CAACE,IAAI;AACtB,CAAC,CAAC;AAEF,MAAMQ,aAAa,GAAGlB,WAAW,CAAC;EAChCmB,IAAI,EAAE,WAAW;EACjBhB,YAAY;EACZiB,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAChB,cAAc,CAACiB,OAAO,EAAGC,KAAK,IAAK;MAC1CA,KAAK,CAACpB,OAAO,GAAG,IAAI;MACpBoB,KAAK,CAACnB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDiB,OAAO,CAAChB,cAAc,CAACmB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpDF,KAAK,CAACpB,OAAO,GAAG,KAAK;MACrBoB,KAAK,CAACrB,SAAS,GAAGuB,MAAM,CAACC,OAAO;IAClC,CAAC,CAAC,CACDL,OAAO,CAAChB,cAAc,CAACsB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACnDF,KAAK,CAACpB,OAAO,GAAG,KAAK;MACrBoB,KAAK,CAACnB,KAAK,GAAGqB,MAAM,CAACrB,KAAK,CAACwB,OAAO,IAAI,2BAA2B;IACnE,CAAC,CAAC,CACDP,OAAO,CAACZ,cAAc,CAACe,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpDF,KAAK,CAACrB,SAAS,GAAGqB,KAAK,CAACrB,SAAS,CAAC2B,MAAM,CAAEhB,QAAQ,IAAKA,QAAQ,CAACE,UAAU,KAAKU,MAAM,CAACC,OAAO,CAAC;IAChG,CAAC,CAAC,CACDL,OAAO,CAACT,cAAc,CAACY,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACpD,MAAMK,eAAe,GAAGL,MAAM,CAACC,OAAO;MACtCH,KAAK,CAACrB,SAAS,GAAGqB,KAAK,CAACrB,SAAS,CAAC6B,GAAG,CAAElB,QAAQ,IAC7CA,QAAQ,CAACE,UAAU,KAAKe,eAAe,CAACf,UAAU,GAAGe,eAAe,GAAGjB,QACzE,CAAC;IACH,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeG,aAAa,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}